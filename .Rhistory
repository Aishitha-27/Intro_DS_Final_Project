knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
# Boxplot for Quantity to visualize outliers
ggplot(data_reduced, aes(x = "", y = Quantity)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Quantity", y = "Quantity") +
theme_minimal()
# Boxplot for UnitPrice to visualize outliers
ggplot(data_reduced, aes(x = "", y = UnitPrice)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of UnitPrice", y = "Unit Price") +
theme_minimal()
# Boxplot for Discount to visualize outliers
ggplot(data_reduced, aes(x = "", y = Discount)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Discount", y = "Discount") +
theme_minimal()
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(length(outlier_indices))  # Return the count of outliers
}
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
cat("Outliers in Quantity:", outliers_quantity, "\n")
cat("Outliers in Unit Price:", outliers_unit_price, "\n")
cat("Outliers in Discount:", outliers_discount, "\n")
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
str(cleaned_data)
xkablesummary(cleaned_data)
cleaned_data$InvoiceDate <- as.Date(cleaned_data$InvoiceDate, format = "%d-%m-%Y")
cleaned_data$Description = as.factor(cleaned_data$Description)
cleaned_data$StockCode = as.factor(cleaned_data$StockCode)
cleaned_data$Country = as.factor(cleaned_data$Country)
cleaned_data$PaymentMethod = as.factor(cleaned_data$PaymentMethod)
cleaned_data$Category = as.factor(cleaned_data$Category)
cleaned_data$ReturnStatus = as.factor(cleaned_data$ReturnStatus)
cleaned_data$SalesChannel = as.factor(cleaned_data$SalesChannel)
cleaned_data$ShipmentProvider = as.factor(cleaned_data$ShipmentProvider)
cleaned_data$OrderPriority = as.factor(cleaned_data$OrderPriority)
cleaned_data$WarehouseLocation = as.factor(cleaned_data$WarehouseLocation)
str(cleaned_data)
sales_by_country <- cleaned_data %>%
group_by(Country) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE))
ggplot(sales_by_country, aes(x = reorder(Country, TotalSales), y = TotalSales)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(
title = "Total Sales by Country",
x = "Country",
y = "Total Sales"
) +
theme_minimal()
return_status_counts <- cleaned_data %>%
group_by(ReturnStatus) %>%
summarise(Count = n()) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
ggplot(return_status_counts, aes(x = "", y = Count, fill = ReturnStatus)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
labs(
title = "Proportion of Return Statuses",
x = NULL,
y = NULL
) +
theme_void() +
theme(legend.title = element_blank())
top_products <- cleaned_data %>%
group_by(Description) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE)) %>%
arrange(desc(TotalSales)) %>%
slice(1:10)
ggplot(top_products, aes(x = reorder(Description, TotalSales), y = TotalSales)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(
title = "Top 10 Products by Total Sales",
x = "Product Description",
y = "Total Sales"
) +
theme_minimal()
cleaned_data <- cleaned_data %>%
mutate(Year = format(InvoiceDate, "%Y"))
category_sales_yearly <- cleaned_data %>%
group_by(Year, Category) %>%
summarise(
TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE),
.groups = "drop"
)
category_sales_yearly$Year <- factor(category_sales_yearly$Year, levels = unique(category_sales_yearly$Year))
ggplot(category_sales_yearly, aes(x = Year, y = TotalSales, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Stacked Sales by Category Over Time (Yearly)",
x = "Year",
y = "Total Sales",
fill = "Category"
) +
theme_minimal() +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sales_by_payment <- cleaned_data %>%
group_by(PaymentMethod) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE))
ggplot(sales_by_payment, aes(x = TotalSales, y = reorder(PaymentMethod, TotalSales))) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
labs(
title = "Total Sales by Payment Method",
x = "Payment Method",
y = "Total Sales"
) +
scale_x_continuous(labels = comma) +
theme_minimal()
top_products <- cleaned_data %>%
group_by(Description) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE)) %>%
arrange(desc(TotalSales)) %>%
slice_head(n = 10)
top_products <- top_products %>%
mutate(Percentage = TotalSales / sum(TotalSales) * 100)
pie <- ggplot(top_products, aes(x = "", y = TotalSales, fill = Description)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
geom_text(
aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5)
) +
labs(
title = "Top 10 Products by Total Sales",
x = NULL,
y = NULL
) +
theme_void() +
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)
)
pie
sales_by_priority <- cleaned_data %>%
group_by(OrderPriority) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE))
ggplot(sales_by_priority, aes(x = TotalSales, y = reorder(OrderPriority, TotalSales))) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(
title = "Sales Distribution by Order Priority",
x = "Order Priority",
y = "Total Sales"
) +
scale_x_continuous(labels = comma) +
theme_minimal()
sales_by_category_return <- cleaned_data %>%
group_by(Category, ReturnStatus) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE))
ggplot(sales_by_category_return, aes(x = Category, y = TotalSales, fill = ReturnStatus)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Total Sales by Category and Return Status",
x = "Category",
y = "Total Sales",
fill = "Return Status"
) +
scale_y_continuous(labels = comma) +
theme_minimal()
