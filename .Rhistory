library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
library(magrittr)
library(Metrics)
library(rattle)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
dim(data_reduced)
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(length(outlier_indices))  # Return the count of outliers
}
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
cat("Outliers in Quantity:", outliers_quantity, "\n")
cat("Outliers in Unit Price:", outliers_unit_price, "\n")
cat("Outliers in Discount:", outliers_discount, "\n")
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
# Boxplot for Quantity to visualize outliers
ggplot(data_reduced, aes(x = "", y = Quantity)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Quantity", y = "Quantity") +
theme_minimal()
# Boxplot for UnitPrice to visualize outliers
ggplot(data_reduced, aes(x = "", y = UnitPrice)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of UnitPrice", y = "Unit Price") +
theme_minimal()
# Boxplot for Discount to visualize outliers
ggplot(data_reduced, aes(x = "", y = Discount)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Discount", y = "Discount") +
theme_minimal()
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
xkablesummary(cleaned_data)
cleaned_data$InvoiceDate <- as.Date(cleaned_data$InvoiceDate, format = "%d-%m-%Y")
cleaned_data$Description = as.factor(cleaned_data$Description)
cleaned_data$StockCode = as.factor(cleaned_data$StockCode)
cleaned_data$Country = as.factor(cleaned_data$Country)
cleaned_data$PaymentMethod = as.factor(cleaned_data$PaymentMethod)
cleaned_data$Category = as.factor(cleaned_data$Category)
cleaned_data$ReturnStatus = as.factor(cleaned_data$ReturnStatus)
cleaned_data$SalesChannel = as.factor(cleaned_data$SalesChannel)
cleaned_data$ShipmentProvider = as.factor(cleaned_data$ShipmentProvider)
cleaned_data$OrderPriority = as.factor(cleaned_data$OrderPriority)
cleaned_data$WarehouseLocation = as.factor(cleaned_data$WarehouseLocation)
str(cleaned_data)
cleaned_data$TotalSales <- cleaned_data$UnitPrice * cleaned_data$Quantity
sales_by_country <- cleaned_data %>%
group_by(Country) %>%
summarise(TotalSales = sum(TotalSales, na.rm = TRUE))
# Create the bar plot
ggplot(sales_by_country, aes(x = reorder(Country, TotalSales), y = TotalSales)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(
title = "Total Sales by Country",
x = "Country",
y = "Total Sales"
) +
theme_light()
return_status_counts <- cleaned_data %>%
group_by(ReturnStatus) %>%
summarise(Count = n()) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
ggplot(return_status_counts, aes(x = "", y = Count, fill = ReturnStatus)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.5)) +
labs(
title = "Proportion of Return Statuses",
x = NULL,
y = NULL
) +
theme_void() +
theme(legend.title = element_blank())
top_products <- cleaned_data %>%
group_by(Description) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE)) %>%
arrange(desc(TotalSales)) %>%
slice(1:10)
ggplot(top_products, aes(x = reorder(Description, TotalSales), y = TotalSales)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(
title = "Top 10 Products by Total Sales",
x = "Product Description",
y = "Total Sales"
) +
theme_minimal()
cleaned_data <- cleaned_data %>%
mutate(Year = format(InvoiceDate, "%Y"))
category_sales_yearly <- cleaned_data %>%
group_by(Year, Category) %>%
summarise(
TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE),
.groups = "drop"
)
category_sales_yearly$Year <- factor(category_sales_yearly$Year, levels = unique(category_sales_yearly$Year))
ggplot(category_sales_yearly, aes(x = Year, y = TotalSales, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Stacked Sales by Category Over Time (Yearly)",
x = "Year",
y = "Total Sales",
fill = "Category"
) +
theme_minimal() +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize total quantities for returned and not-returned items
sales_return_summary <- cleaned_data %>%
group_by(Description, ReturnStatus) %>%
summarise(
TotalQuantity = sum(Quantity, na.rm = TRUE),
.groups = "drop"
)
ggplot(sales_return_summary, aes(x = reorder(Description, TotalQuantity), y = TotalQuantity, fill = ReturnStatus)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Most Returned and Not Returned Items",
x = "Item Description",
y = "Total Quantity",
fill = "Return Status"
) +
scale_y_continuous(labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = "bold")
)
product_preferences <- cleaned_data %>%
group_by(Description, Country) %>%
summarise(TotalSales = sum(UnitPrice * Quantity, na.rm = TRUE), .groups = "drop")
ggplot(product_preferences, aes(x = Description, y = TotalSales, fill = Country)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Product Preferences by Customer Type",
x = "Product",
y = "Total Sales",
fill = "Customer Type") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = "bold"))
unique(cleaned_data$PaymentMethod)
payment_segregation <- table(cleaned_data$PaymentMethod, cleaned_data$Category)
chisq_test <- chisq.test(payment_segregation)
print(chisq_test)
t_test <- t.test(Quantity ~ Discount > 0.1, data = cleaned_data)
print(t_test)
anova <- aov(ShippingCost ~ ShipmentProvider, data = cleaned_data)
summary(anova)
t_test2 <- t.test(Quantity ~ SalesChannel, data = cleaned_data)
print(t_test2)
return_category <- table(cleaned_data$ReturnStatus, cleaned_data$Category)
chisq_test2 <- chisq.test(return_category)
print(chisq_test2)
sales_data <- cleaned_data %>%
group_by(StockCode, OrderPriority, CustomerID) %>%
summarise(
avg_discount = mean(Discount, na.rm = TRUE),
total_sales_revenue = sum(UnitPrice * Quantity, na.rm = TRUE),
total_quantity_sold = sum(Quantity, na.rm = TRUE),
.groups = "drop"
)
customer_data <- cleaned_data %>%
select(CustomerID, Country, PaymentMethod) %>%
distinct(CustomerID, .keep_all = TRUE)
sales_data <- sales_data %>%
left_join(customer_data, by = "CustomerID")
set.seed(123)
train_indices <- sample(1:nrow(sales_data), 0.7 * nrow(sales_data))
train_data <- sales_data[train_indices, ]
test_data <- sales_data[-train_indices, ]
lm_sales_model <- lm(
total_sales_revenue ~ avg_discount + OrderPriority + Country + PaymentMethod + total_quantity_sold,
data = train_data)
summary(lm_sales_model)
regression_tree <- rpart(
total_sales_revenue ~ avg_discount + OrderPriority + Country + PaymentMethod + total_quantity_sold,data = train_data,method="anova")
summary(regression_tree)
fancyRpartPlot(regression_tree)
tree_predictions <- predict(regression_tree, test_data)
test_data$predicted_sales_tree <- tree_predictions
comparison_tree <- data.frame(Actual = test_data$total_sales_revenue,
Predicted = test_data$predicted_sales_tree)
head(comparison_tree, 10)
mae_value <- mae(comparison$Actual, comparison$Predicted)
mae_value <- mae(comparison_tree$Actual, comparison$Predicted)
mae_value <- mae(comparison_tree$Actual, comparison_tree$Predicted)
rmse_value <- rmse(comparison_tree$Actual, comparison_tree$Predicted)
mape_value <- mape(comparison_tree$Actual, comparison_tree$Predicted)
cat("MAE:", mae_value, "\nRMSE:", rmse_value, "\nMAPE:", mape_value)
library(ggcorrplot)
library(corrplot)
cor_matrix <- cor(train_data %>% select(avg_discount, total_sales_revenue, total_quantity_sold))
ggcorrplot(cor_matrix, lab = TRUE)
cor_matrix <- cor(train_data %>% select(avg_discount, total_sales_revenue, total_quantity_sold))
corrplot(cor_matrix, lab = TRUE)
library(corrplot)
# Compute the correlation matrix
cor_matrix <- cor(train_data %>% select(avg_discount, total_sales_revenue, total_quantity_sold))
# Customize the corrplot
corrplot(
cor_matrix,
method = "color",  # Use colored tiles instead of circles
type = "upper",    # Show only the upper triangle
addCoef.col = "black",  # Add correlation coefficients in black
tl.col = "black",  # Change axis label color
tl.srt = 45,       # Rotate axis labels
col = colorRampPalette(c("red", "white", "blue"))(200)  # Custom color scale
)
cor_matrix <- cor(train_data %>% select(avg_discount, total_sales_revenue, total_quantity_sold))
corrplot(
cor_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
col = colorRampPalette(c("red", "white", "purple"))(200))
# Extract feature importance
importance_values <- as.data.frame(regression_tree$variable.importance)
# Convert to a data frame
var_importance <- data.frame(
Variable = rownames(importance_values),
Overall = as.numeric(importance_values$`regression_tree$variable.importance`)
)
# Reset rownames
rownames(var_importance) <- NULL
# Visualize the feature importance
library(ggplot2)
ggplot(var_importance, aes(x = reorder(Variable, Overall), y = Overall)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(
title = "Feature Importance (Regression Tree)",
x = "Features",
y = "Importance"
)
library(rpart.plot)
rpart.plot::rpart.plot(regression_tree, main = "Regression Tree")
ggplot(data = train_data, aes(x = total_quantity_sold, y = total_sales_revenue)) +
geom_point(alpha = 0.4, color = "purple") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Sales Revenue vs Quantity Sold", x = "Total Quantity Sold", y = "Total Sales Revenue")
predictions <- predict(lm_sales_model, test_data)
test_data$predicted_sales <- predictions
comparison <- data.frame(Actual = test_data$total_sales_revenue,
Predicted = test_data$predicted_sales)
head(comparison, 10)
residuals <- test_data$total_sales_revenue - predictions
MAE <- mean(abs(residuals))
RMSE <- sqrt(mean(residuals^2))
SS_total <- sum((test_data$total_sales_revenue - mean(test_data$total_sales_revenue))^2)
SS_residual <- sum(residuals^2)
R_squared <- 1 - (SS_residual / SS_total)
cat("MAE:", MAE, "\n")
cat("RMSE:", RMSE, "\n")
cat("R-squared:", R_squared, "\n")
regression_tree <- rpart(
total_sales_revenue ~ avg_discount + OrderPriority + Country + PaymentMethod + total_quantity_sold,data = train_data,method="anova")
summary(regression_tree)
importance_values <- as.data.frame(regression_tree$variable.importance)
var_importance <- data.frame(
Variable = rownames(importance_values),
Overall = as.numeric(importance_values$`regression_tree$variable.importance`)
)
rownames(var_importance) <- NULL
ggplot(var_importance, aes(x = reorder(Variable, Overall), y = Overall)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Feature Importance (Regression Tree)",x = "Features",
y = "Importance")
importance_values <- as.data.frame(regression_tree$variable.importance)
var_importance <- data.frame(
Variable = rownames(importance_values),
Overall = as.numeric(importance_values$`regression_tree$variable.importance`)
)
rownames(var_importance) <- NULL
ggplot(var_importance, aes(x = reorder(Variable, Overall), y = Overall)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Feature Importance",x = "Features",
y = "Importance")
customer_data <- cleaned_data %>%
group_by(CustomerID) %>%
summarize(
purchase_frequency = n_distinct(InvoiceNo),
total_quantity = sum(Quantity, na.rm = TRUE),
total_spend = sum(UnitPrice * Quantity, na.rm = TRUE),
avg_discount = mean(Discount, na.rm = TRUE),
preferred_payment = as.character(names(sort(table(PaymentMethod), decreasing = TRUE)[1])),
preferred_category = as.character(names(sort(table(Category), decreasing = TRUE)[1]))
)
spend_summary <- summary(customer_data$total_spend)
low_threshold <- spend_summary["1st Qu."]
high_threshold <- spend_summary["3rd Qu."]
customer_data <- customer_data %>%
mutate(
customer_segment = case_when(
total_spend < low_threshold ~ "Low",
total_spend >= low_threshold & total_spend < high_threshold ~ "Medium",
total_spend >= high_threshold ~ "High"
)
)
customer_data$preferred_payment <-  as.factor(customer_data$preferred_payment)
customer_data$preferred_category <- as.factor(customer_data$preferred_category)
customer_data$preferred_payment <- as.numeric(customer_data$preferred_payment)
customer_data$preferred_category <- as.numeric(customer_data$preferred_category)
set.seed(123)
train_indices <- sample(1:nrow(customer_data), 0.7 * nrow(customer_data))
train_data <- customer_data[train_indices, ]
test_data <- customer_data[-train_indices, ]
classification_tree <- rpart(
customer_segment ~ purchase_frequency + total_quantity + avg_discount + preferred_payment + preferred_category,
data = train_data,
method = "class"
)
summary(classification_tree)
fancyRpartPlot(classification_tree)
logistic_data <- cleaned_data %>%
mutate(
SalesChannel = ifelse(SalesChannel == "Online", 1, 0)
) %>%
select(
SalesChannel, CustomerID, Quantity, UnitPrice, Discount, OrderPriority, Country, PaymentMethod
)
set.seed(123)
train_indices <- sample(1:nrow(logistic_data), 0.7 * nrow(logistic_data))
train_data <- logistic_data[train_indices, ]
test_data <- logistic_data[-train_indices, ]
logistic_model <- glm(
SalesChannel ~ Quantity + UnitPrice + Discount + OrderPriority + Country + PaymentMethod,
data = train_data,
family = "binomial"
)
summary(logistic_model)
