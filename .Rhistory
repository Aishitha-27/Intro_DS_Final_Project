library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
library(magrittr)
library(Metrics)
library(rattle)
library(corrplot)
library(pROC)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
colSums(is.na(data_clean))
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(length(outlier_indices))  # Return the count of outliers
}
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
cat("Outliers in Quantity:", outliers_quantity, "\n")
cat("Outliers in Unit Price:", outliers_unit_price, "\n")
cat("Outliers in Discount:", outliers_discount, "\n")
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
cleaned_data$InvoiceDate <- as.Date(cleaned_data$InvoiceDate, format = "%d-%m-%Y")
cleaned_data$Description = as.factor(cleaned_data$Description)
cleaned_data$StockCode = as.factor(cleaned_data$StockCode)
cleaned_data$Country = as.factor(cleaned_data$Country)
cleaned_data$PaymentMethod = as.factor(cleaned_data$PaymentMethod)
cleaned_data$Category = as.factor(cleaned_data$Category)
cleaned_data$ReturnStatus = as.factor(cleaned_data$ReturnStatus)
cleaned_data$SalesChannel = as.factor(cleaned_data$SalesChannel)
cleaned_data$ShipmentProvider = as.factor(cleaned_data$ShipmentProvider)
cleaned_data$OrderPriority = as.factor(cleaned_data$OrderPriority)
cleaned_data$WarehouseLocation = as.factor(cleaned_data$WarehouseLocation)
logistic_data <- cleaned_data %>%
mutate(
SalesChannel = ifelse(SalesChannel == "Online", 1, 0)
) %>%
select(
SalesChannel, CustomerID, Quantity, UnitPrice, Discount, OrderPriority, Country, PaymentMethod
)
set.seed(123)
train_indices <- sample(1:nrow(logistic_data), 0.7 * nrow(logistic_data))
train_data <- logistic_data[train_indices, ]
test_data <- logistic_data[-train_indices, ]
logistic_model <- glm(
SalesChannel ~ Quantity + UnitPrice + Discount + OrderPriority + Country + PaymentMethod,
data = train_data,
family = "binomial"
)
summary(logistic_model)
predicted_probabilities <- predict(logistic_model, test_data, type = "response")
test_data$predicted_channel <- ifelse(predicted_probabilities > 0.5, 1, 0)
confusion_matrix <- table(Actual = test_data$SalesChannel, Predicted = test_data$predicted_channel)
print(confusion_matrix)
performance <- confusionMatrix(factor(test_data$predicted_channel), factor(test_data$SalesChannel))
accuracy <- performance$overall["Accuracy"]
print(accuracy)
predicted_probs = predict(logistic_model, test_data, type = "response")
roc_curve= roc(test_data$SalesChannel, predicted_probabilities)
plot(roc_curve, col = "blue", lwd = 2, main = "ROC Curve")
abline(a = 0, b = 1, col = "red", lty = 2)
auc_value = auc(roc_curve)
cat("AUC:", auc_value, "\n")
