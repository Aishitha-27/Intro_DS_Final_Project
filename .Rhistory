Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(ifelse(x < lower_bound | x > upper_bound, TRUE, FALSE))
}
data_reduced <- data_reduced %>%
mutate(
Quantity_Outlier = detect_outliers(Quantity),
UnitPrice_Outlier = detect_outliers(UnitPrice),
Discount_Outlier = detect_outliers(Discount)
)
outlier_summary <- data_reduced %>%
summarise(
Quantity_Outliers = sum(Quantity_Outlier, na.rm = TRUE),
UnitPrice_Outliers = sum(UnitPrice_Outlier, na.rm = TRUE),
Discount_Outliers = sum(Discount_Outlier, na.rm = TRUE)
)
data_reduced <- data_reduced %>%
mutate(
Quantity_Outlier = detect_outliers(Quantity),
UnitPrice_Outlier = detect_outliers(UnitPrice),
Discount_Outlier = detect_outliers(Discount)
)
data_reduced <- data_reduced %>%
mutate(
Quantity_Outlier = detect_outliers(Quantity),
UnitPrice_Outlier = detect_outliers(UnitPrice),
Discount_Outlier = detect_outliers(Discount)
)
library(dplyr)
detect_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(ifelse(x < lower_bound | x > upper_bound, TRUE, FALSE))
}
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(leaflet)
library(tidyverse)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
detect_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(ifelse(x < lower_bound | x > upper_bound, TRUE, FALSE))
}
if (!all(c("Quantity", "UnitPrice", "Discount") %in% colnames(data_reduced))) {
stop("One or more of the columns Quantity, UnitPrice, or Discount do not exist in the dataset.")
}
if (!all(c("Quantity", "UnitPrice", "Discount") %in% colnames(data_reduced))) {
stop("One or more of the columns Quantity, UnitPrice, or Discount do not exist in the dataset.")
}
data_reduced <- data_reduced %>%
mutate(
Quantity = as.numeric(Quantity),
UnitPrice = as.numeric(UnitPrice),
Discount = as.numeric(Discount)
)
dim(data_reduced)
detect_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(ifelse(x < lower_bound | x > upper_bound, TRUE, FALSE))
}
# Check if the conversion introduced any NA values and warn if so
if (any(is.na(data_reduced$Quantity)) | any(is.na(data_reduced$UnitPrice)) | any(is.na(data_reduced$Discount))) {
warning("NA values introduced in Quantity, UnitPrice, or Discount columns after conversion to numeric.")
}
```
if (any(is.na(data_reduced$Quantity)) | any(is.na(data_reduced$UnitPrice)) | any(is.na(data_reduced$Discount))) {
warning("NA values introduced in Quantity, UnitPrice, or Discount columns after conversion to numeric.")
}
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(leaflet)
library(tidyverse)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
detect_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(ifelse(x < lower_bound | x > upper_bound, TRUE, FALSE))
}
data_reduced <- data_reduced %>%
mutate(
Quantity_Outlier = detect_outliers(Quantity),
UnitPrice_Outlier = detect_outliers(UnitPrice),
Discount_Outlier = detect_outliers(Discount)
)
outlier_summary <- data_reduced %>%
summarise(
Quantity_Outliers = sum(Quantity_Outlier, na.rm = TRUE),
UnitPrice_Outliers = sum(UnitPrice_Outlier, na.rm = TRUE),
Discount_Outliers = sum(Discount_Outlier, na.rm = TRUE)
)
print(outlier_summary)
head(data_reduced)
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(leaflet)
library(tidyverse)
data=read.csv("/Users/amoghramagiri/Downloads/online_sales_dataset.csv")
data=read.csv("/Users/trishasingh/Documents/GitHub/Intro_DS_Final_Project/online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
library(ggplot2)
library(dplyr)
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
# Remove outliers from relevant columns
cleaned_data <- data %>%
remove_outliers("Quantity") %>%
remove_outliers("UnitPrice") %>%
remove_outliers("Discount")
# Plotting the distribution of Unit Price
ggplot(cleaned_data, aes(x = UnitPrice)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
ggtitle("Distribution of Unit Price") +
xlab("Unit Price") +
ylab("Frequency")
# Plotting the distribution of Quantity
ggplot(cleaned_data, aes(x = Quantity)) +
geom_histogram(bins = 30, fill = "orange", alpha = 0.7) +
ggtitle("Distribution of Quantity") +
xlab("Quantity") +
ylab("Frequency")
# Plotting the distribution of Discount
ggplot(cleaned_data, aes(x = Discount)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.7) +
ggtitle("Distribution of Discount") +
xlab("Discount") +
ylab("Frequency")
# Scatter plot of Quantity vs Unit Price by Category
ggplot(cleaned_data, aes(x = Quantity, y = UnitPrice, color = Category)) +
geom_point(alpha = 0.7) +
ggtitle("Quantity vs Unit Price by Category") +
xlab("Quantity") +
ylab("Unit Price") +
theme_minimal()
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
# Remove outliers from relevant columns
cleaned_data <- data %>%
remove_outliers("Quantity") %>%
remove_outliers("UnitPrice") %>%
remove_outliers("Discount")
# Plotting the distribution of Unit Price
ggplot(cleaned_data, aes(x = UnitPrice)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
ggtitle("Distribution of Unit Price") +
xlab("Unit Price") +
ylab("Frequency")
# Plotting the distribution of Quantity
ggplot(cleaned_data, aes(x = Quantity)) +
geom_histogram(bins = 30, fill = "orange", alpha = 0.7) +
ggtitle("Distribution of Quantity") +
xlab("Quantity") +
ylab("Frequency")
# Plotting the distribution of Discount
ggplot(cleaned_data, aes(x = Discount)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.7) +
ggtitle("Distribution of Discount") +
xlab("Discount") +
ylab("Frequency")
# Scatter plot of Quantity vs Unit Price by Category
ggplot(cleaned_data, aes(x = Quantity, y = UnitPrice, color = Category)) +
geom_point(alpha = 0.7) +
ggtitle("Quantity vs Unit Price by Category") +
xlab("Quantity") +
ylab("Unit Price") +
theme_minimal()
```
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
# Remove outliers from relevant columns
cleaned_data <- data %>%
remove_outliers("Quantity") %>%
remove_outliers("UnitPrice") %>%
remove_outliers("Discount")
# Plotting the distribution of Unit Price
ggplot(cleaned_data, aes(x = UnitPrice)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
ggtitle("Distribution of Unit Price") +
xlab("Unit Price") +
ylab("Frequency")
# Plotting the distribution of Quantity
ggplot(cleaned_data, aes(x = Quantity)) +
geom_histogram(bins = 30, fill = "orange", alpha = 0.7) +
ggtitle("Distribution of Quantity") +
xlab("Quantity") +
ylab("Frequency")
# Plotting the distribution of Discount
ggplot(cleaned_data, aes(x = Discount)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.7) +
ggtitle("Distribution of Discount") +
xlab("Discount") +
ylab("Frequency")
# Scatter plot of Quantity vs Unit Price by Category
ggplot(cleaned_data, aes(x = Quantity, y = UnitPrice, color = Category)) +
geom_point(alpha = 0.7) +
ggtitle("Quantity vs Unit Price by Category") +
xlab("Quantity") +
ylab("Unit Price") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(leaflet)
library(tidyverse)
data=read.csv("/Users/trishasingh/Documents/GitHub/Intro_DS_Final_Project/online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
library(ggplot2)
library(dplyr)
library(outliers)
library(ggplot2)
library(dplyr)
library(outliers)
ggplot(data, aes(y = Quantity)) +
geom_boxplot(fill = "lightblue") +
ggtitle("Box Plot of Quantity") +
ylab("Quantity")
# Box plot for Unit Price
ggplot(data, aes(y = UnitPrice)) +
geom_boxplot(fill = "lightgreen") +
ggtitle("Box Plot of Unit Price") +
ylab("Unit Price")
# Box plot for Discount
ggplot(data, aes(y = Discount)) +
geom_boxplot(fill = "lightcoral") +
ggtitle("Box Plot of Discount") +
ylab("Discount")
# Step 2: Use OutlierKD2 to identify potential outliers
# OutlierKD2 function isn't a native function; if referring to OutlierKD, use it as follows
# Assuming OutlierKD2 performs similar function, otherwise custom code or additional packages may be needed.
# Note: Substitute the below with actual code specific to OutlierKD2 if available.
outliers_quantity <- outlier(data$Quantity)
outliers_unit_price <- outlier(data$UnitPrice)
outliers_discount <- outlier(data$Discount)
# Print outliers identified by OutlierKD (or similar function)
print("Outliers in Quantity:")
print(outliers_quantity)
print("Outliers in Unit Price:")
print(outliers_unit_price)
print("Outliers in Discount:")
print(outliers_discount)
# Step 3: Manually remove outliers using quantile range
# Define a function to remove outliers based on quantile range (1.5 * IQR method)
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
# Remove outliers for Quantity, UnitPrice, and Discount columns
cleaned_data <- data %>%
remove_outliers("Quantity") %>%
remove_outliers("UnitPrice") %>%
remove_outliers("Discount")
# Display the cleaned dataset
head(cleaned_data)
head(data_reduced)
library(outliers)
# Box plot for Quantity
ggplot(data, aes(y = Quantity)) +
geom_boxplot(fill = "lightblue") +
ggtitle("Box Plot of Quantity") +
ylab("Quantity")
# Box plot for Unit Price
ggplot(data, aes(y = UnitPrice)) +
geom_boxplot(fill = "lightgreen") +
ggtitle("Box Plot of Unit Price") +
ylab("Unit Price")
# Box plot for Discount
ggplot(data, aes(y = Discount)) +
geom_boxplot(fill = "lightcoral") +
ggtitle("Box Plot of Discount") +
ylab("Discount")
outliers_quantity <- outlier(data$Quantity)
outliers_unit_price <- outlier(data$UnitPrice)
outliers_discount <- outlier(data$Discount)
print("Outliers in Quantity:")
print(outliers_quantity)
print("Outliers in Unit Price:")
print(outliers_unit_price)
print("Outliers in Discount:")
print(outliers_discount)
remove_outliers <- function(df, column) {
Q1 <- quantile(df[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(df[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df %>% filter(df[[column]] >= lower_bound & df[[column]] <= upper_bound)
}
cleaned_data <- data %>%
remove_outliers("Quantity") %>%
remove_outliers("UnitPrice") %>%
remove_outliers("Discount")
head(cleaned_data)
head(data_reduced)
knitr::opts_chunk$set(echo = TRUE)
# Boxplot for Quantity to visualize outliers
ggplot(data_reduced, aes(x = "", y = Quantity)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Quantity", y = "Quantity") +
theme_minimal()
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
data_clean<- na.omit(data)
colSums(is.na(data_clean))
dim(data_clean)
dim(data_clean)
set.seed(123)
data_reduced <- data_clean %>% sample_n(10000)
nrow(data_reduced)
dim(data_reduced)
# Boxplot for Quantity to visualize outliers
ggplot(data_reduced, aes(x = "", y = Quantity)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Quantity", y = "Quantity") +
theme_minimal()
# Boxplot for UnitPrice to visualize outliers
ggplot(data_reduced, aes(x = "", y = UnitPrice)) +
geom_boxplot(ofill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of UnitPrice", y = "Unit Price") +
theme_minimal()
# Boxplot for Discount to visualize outliers
ggplot(data_reduced, aes(x = "", y = Discount)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Discount", y = "Discount") +
theme_minimal()
# Boxplot for Quantity to visualize outliers
ggplot(data_reduced, aes(x = "", y = Quantity)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Quantity", y = "Quantity") +
theme_minimal()
# Boxplot for UnitPrice to visualize outliers
ggplot(data_reduced, aes(x = "", y = UnitPrice)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of UnitPrice", y = "Unit Price") +
theme_minimal()
# Boxplot for Discount to visualize outliers
ggplot(data_reduced, aes(x = "", y = Discount)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Boxplot of Discount", y = "Discount") +
theme_minimal()
# Function to identify outliers using kernel density estimation
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(outlier_indices)
}
# Identify outliers in data_reduced using kd2
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
# Print outlier indices
print("Outliers in Quantity (by kd2):")
print(outliers_quantity)
print("Outliers in Unit Price (by kd2):")
print(outliers_unit_price)
print("Outliers in Discount (by kd2):")
print(outliers_discount)
# Function to remove outliers from a specific column using kd2
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
# Remove outliers using kd2
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
# Display the first few rows of the cleaned dataset
str(cleaned_data)
# Print outlier indices
print("Outliers in Quantity:")
print(outliers_quantity)
print("Outliers in Unit Price:")
print(outliers_unit_price)
print("Outliers in Discount:")
print(outliers_discount)
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(length(outlier_indices))  # Return the count of outliers
}
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
cat("Outliers in Quantity:", outliers_quantity, "\n")
cat("Outliers in Unit Price:", outliers_unit_price, "\n")
cat("Outliers in Discount:", outliers_discount, "\n")
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
# Display the first few rows of the cleaned dataset
str(cleaned_data)
