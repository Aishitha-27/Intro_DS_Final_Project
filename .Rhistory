SalesChannel ~ Quantity + UnitPrice + Discount + OrderPriority + PaymentMethod,
data = train_data,
family = "binomial"
)
summary(logistic_model)
predicted_probabilities <- predict(logistic_model, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
test_data$predicted_sales_channel <- predicted_class
confusion_matrix2 <- confusionMatrix(
data = as.factor(test_data$predicted_sales_channel),
reference = as.factor(test_data$SalesChannel))
print(confusion_matrix2)
logistic_model$coefficients
predicted_probabilities <- predict(logistic_model, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
test_data$predicted_sales_channel <- predicted_class
confusion_matrix2 <- confusionMatrix(
data = as.factor(test_data$predicted_sales_channel),
reference = as.factor(test_data$SalesChannel))
print(confusion_matrix2)
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
library(magrittr)
library(Metrics)
library(rattle)
library(corrplot)
library(pROC)
data=read.csv("online_sales_dataset.csv")
head(data, 5)
str(data)
data_clean<- na.omit(data)
kd2_outliers <- function(column) {
density <- density(column, na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density(column)$y < threshold)
return(length(outlier_indices))  # Return the count of outliers
}
outliers_quantity <- kd2_outliers(data_reduced$Quantity)
outliers_unit_price <- kd2_outliers(data_reduced$UnitPrice)
outliers_discount <- kd2_outliers(data_reduced$Discount)
cat("Outliers in Quantity:", outliers_quantity, "\n")
cat("Outliers in Unit Price:", outliers_unit_price, "\n")
cat("Outliers in Discount:", outliers_discount, "\n")
remove_kd2_outliers <- function(df, column) {
density <- density(df[[column]], na.rm = TRUE)
threshold <- 0.01  # Define a threshold for low-density regions
outlier_indices <- which(density$y < threshold)
if (length(outlier_indices) > 0) {
df <- df[-outlier_indices, ]
}
return(df)
}
cleaned_data <- data_reduced %>%
remove_kd2_outliers("Quantity") %>%
remove_kd2_outliers("UnitPrice") %>%
remove_kd2_outliers("Discount")
cleaned_data$InvoiceDate <- as.Date(cleaned_data$InvoiceDate, format = "%d-%m-%Y")
cleaned_data$Description = as.factor(cleaned_data$Description)
cleaned_data$StockCode = as.factor(cleaned_data$StockCode)
cleaned_data$Country = as.factor(cleaned_data$Country)
cleaned_data$PaymentMethod = as.factor(cleaned_data$PaymentMethod)
cleaned_data$Category = as.factor(cleaned_data$Category)
cleaned_data$ReturnStatus = as.factor(cleaned_data$ReturnStatus)
cleaned_data$SalesChannel = as.factor(cleaned_data$SalesChannel)
cleaned_data$ShipmentProvider = as.factor(cleaned_data$ShipmentProvider)
cleaned_data$OrderPriority = as.factor(cleaned_data$OrderPriority)
cleaned_data$WarehouseLocation = as.factor(cleaned_data$WarehouseLocation)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
set.seed(123)
split <- sample.split(data$ReturnStatus, SplitRatio = 0.8)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
set.seed(123)
split <- sample.split(data$ReturnStatus, = 0.8)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
set.seed(123)
split <- sample.split(data$ReturnStatus, = 0.8, list = FALSE)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
set.seed(123)
split <- sample.split(data$ReturnStatus,p = 0.8, list = FALSE)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
set.seed(123)
split <- createDataPartition(data$ReturnStatus, p = 0.8, list = FALSE)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
library(caret)
set.seed(123)
trainIndex <- createDataPartition(data_clean$ReturnStatus, p = 0.8, list = FALSE)
train <- data_clean[trainIndex, ]
test <- data_clean[-trainIndex, ]
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
library(caret)
set.seed(123)
trainIndex <- createDataPartition(data$ReturnStatus, p = 0.8, list = FALSE)
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
sum(is.na(data))
new_data <- cleaned_data %>%
select(ReturnStatus, Quantity, UnitPrice, Discount, ShippingCost, OrderPriority,
PaymentMethod, Category, SalesChannel, ShipmentProvider, WarehouseLocation)
# Encode categorical variables
data <- new_data %>%
mutate(across(where(is.factor), as.numeric))
# Train-test split (80-20)
library(caret)
set.seed(123)
trainIndex <- createDataPartition(new_data$ReturnStatus, p = 0.8, list = FALSE)
# Install necessary libraries if not already installed
install.packages(c("dplyr", "caret", "rpart", "rpart.plot", "caTools"))
# Load libraries
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
# Data Preprocessing
# Convert factors to numeric where necessary
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
# Handle missing data (e.g., by removing NA values or using imputation)
cleaned_data <- na.omit(cleaned_data)
# Optional: Create a new binary outcome variable
# cleaned_data$ReturnStatus <- as.numeric(cleaned_data$ReturnStatus) # 0 = Not Returned, 1 = Returned
# Load libraries
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
# Data Preprocessing
# Convert factors to numeric where necessary
cleaned_data$ReturnStatus <- ifelse(cleaned_data$ReturnStatus == "Returned", 1, 0)
# Handle missing data (e.g., by removing NA values or using imputation)
cleaned_data <- na.omit(cleaned_data)
# Optional: Create a new binary outcome variable
# cleaned_data$ReturnStatus <- as.numeric(cleaned_data$ReturnStatus) # 0 = Not Returned, 1 = Returned
# Split data into training and testing sets
set.seed(123)  # Set seed for reproducibility
split <- sample.split(cleaned_data$ReturnStatus, SplitRatio = 0.8)
# Set seed for reproducibility
set.seed(123)
# Split the data into training (70%) and testing (30%) sets
train_indices1 <- sample(1:nrow(cleaned_data), 0.7 * nrow(cleaned_data))
# Create the training dataset
train_data1 <- cleaned_data[train_indices1, ]
# Create the testing dataset
test_data1 <- cleaned_data[-train_indices1, ]
# Fit logistic regression model
log_model <- glm(ReturnStatus ~ Quantity + UnitPrice + Discount + Category + SalesChannel + OrderPriority,
family = binomial,
data = train_data)
# Set seed for reproducibility
set.seed(123)
# Split the data into training (70%) and testing (30%) sets
train_indices2 <- sample(1:nrow(cleaned_data), 0.7 * nrow(cleaned_data))
# Create the training dataset
train_data2 <- cleaned_data[train_indices1, ]
# Create the testing dataset
test_data2 <- cleaned_data[-train_indices1, ]
# Fit logistic regression model
log_model <- glm(ReturnStatus ~ Quantity + UnitPrice + Discount + Category + SalesChannel + OrderPriority,
family = binomial,
data = train_data2)
# Summarize the model
summary(log_model)
# Predictions on test data
log_preds <- predict(log_model, test_data, type = "response")
# 1. Handling Missing Values
# Check for missing values in the dataset
sum(is.na(cleaned_data))
# If missing values are found, we can either impute them or remove rows
# For simplicity, let's remove rows with missing values (you can choose imputation if preferred)
cleaned_data <- na.omit(cleaned_data)
# 2. Convert Categorical Variables to Numeric (Encoding)
# Convert factor variables to dummy variables using model.matrix
cleaned_data_encoded <- model.matrix(~ Category + SalesChannel + OrderPriority + Country + PaymentMethod +
ShipmentProvider + WarehouseLocation + ReturnStatus - 1,
data = cleaned_data)
# Combine the encoded data with the original dataset (excluding the original categorical columns)
cleaned_data_final <- cbind(cleaned_data[, c("Quantity", "UnitPrice", "Discount", "ShippingCost")],
cleaned_data_encoded)
# Make sure ReturnStatus is a factor in the final dataset
cleaned_data_final$ReturnStatus <- as.factor(cleaned_data$ReturnStatus)
# 3. Scaling the Numeric Variables
# Scale numeric variables like Quantity, UnitPrice, Discount, and ShippingCost
scaled_data <- cleaned_data_final
scaled_data[, c("Quantity", "UnitPrice", "Discount", "ShippingCost")] <- scale(scaled_data[, c("Quantity", "UnitPrice", "Discount", "ShippingCost")])
# Now that the data is preprocessed, we can proceed with the train-test split
# Logistic Regression Model: Predicting ReturnStatus (dependent variable)
log_model <- glm(ReturnStatus ~ .,
data = train_data,
family = binomial)
# Check the structure of the dataset
str(cleaned_data)
# Remove NA rows (if any) or handle them
cleaned_data <- na.omit(cleaned_data)
# Encode 'ReturnStatus' as a factor (already done, but let's check)
cleaned_data$ReturnStatus <- as.factor(cleaned_data$ReturnStatus)
# Convert any categorical variables (if not already factors)
cleaned_data$Category <- as.factor(cleaned_data$Category)
cleaned_data$SalesChannel <- as.factor(cleaned_data$SalesChannel)
cleaned_data$PaymentMethod <- as.factor(cleaned_data$PaymentMethod)
cleaned_data$Country <- as.factor(cleaned_data$Country)
# Optional: Scale/normalize numeric features if needed
cleaned_data$UnitPrice <- scale(cleaned_data$UnitPrice)
cleaned_data$Quantity <- scale(cleaned_data$Quantity)
cleaned_data$ShippingCost <- scale(cleaned_data$ShippingCost)
# Split the dataset into training and test sets
set.seed(123)  # For reproducibility
trainIndex <- createDataPartition(cleaned_data$ReturnStatus, p = 0.8, list = FALSE)
train_data <- cleaned_data[trainIndex, ]
test_data <- cleaned_data[-trainIndex, ]
# Build the logistic regression model
log_model <- glm(ReturnStatus ~ Quantity + UnitPrice + Discount + Category + OrderPriority + SalesChannel + ShippingCost,
data = train_data,
family = "binomial")
# Summary of the model
summary(log_model)
# Predict on the test set
log_pred <- predict(log_model, test_data, type = "response")
log_pred_class <- ifelse(log_pred > 0.5, "Returned", "Not Returned")
# Confusion Matrix and Evaluation
confusionMatrix(log_pred_class, test_data$ReturnStatus)
knitr::opts_chunk$set(echo = TRUE)
lm_sales_model <- lm(
total_sales_revenue ~ avg_discount + OrderPriority + PaymentMethod + total_quantity_sold,
data = train_data1)
summary(lm_sales_model)
vif(lm_Sales_model)
library(car)
vif(lm_Sales_model)
lm_sales_model$coefficients
vif(lm_sales_model)
lm_sales_model <- lm(
total_sales_revenue ~ avg_discount + total_quantity_sold,
data = train_data1)
summary(lm_sales_model)
lm_sales_model$coefficients
vif(lm_sales_model)
fitted_values <- lm_sales_model$fitted.values
residuals <- train_data1$total_sales_revenue - fitted_values
MAE <- mean(abs(residuals))
RMSE <- sqrt(mean(residuals^2))
SS_total <- sum((train_data1$total_sales_revenue - mean(train_data1$total_sales_revenue))^2)
SS_residual <- sum(residuals^2)
R_squared <- 1 - (SS_residual / SS_total)
n <- nrow(train_data1)
p <- length(coef(lm_sales_model)) - 1
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1)) / (n - p - 1)
cat("MAE:", MAE, "\n")
cat("RMSE:", RMSE, "\n")
cat("R-squared:", R_squared, "\n")
cat("Adjusted R-squared:", Adjusted_R_squared, "\n")
regression_tree <- rpart(
total_sales_revenue ~ avg_discount +  total_quantity_sold,data = train_data1,method="anova")
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
library(magrittr)
library(Metrics)
library(rattle)
library(corrplot)
library(pROC)
regression_tree <- rpart(
total_sales_revenue ~ avg_discount +  total_quantity_sold,data = train_data1,method="anova")
summary(regression_tree)
fancyRpartPlot(regression_tree)
residuals_tree <- test_data1$total_sales_revenue - predict(regression_tree, test_data1)
MAE_tree <- mean(abs(residuals_tree))
RMSE_tree <- sqrt(mean(residuals_tree^2))
SS_total_tree <- sum((test_data1$total_sales_revenue - mean(test_data1$total_sales_revenue))^2)
SS_residual_tree <- sum(residuals_tree^2)
R_squared_tree <- 1 - (SS_residual_tree / SS_total_tree)
n <- nrow(test_data1)  # number of data points
p <- length(coef(regression_tree))  # number of predictors
Adjusted_R_squared_tree <- 1 - ((1 - R_squared_tree) * (n - 1)) / (n - p - 1)
cat("MAE (Tree):", MAE_tree, "\n")
cat("RMSE (Tree):", RMSE_tree, "\n")
cat("R-squared (Tree):", R_squared_tree, "\n")
cat("Adjusted R-squared (Tree):", Adjusted_R_squared_tree, "\n")
predictions <- predict(classification_tree, test_data, type = "class")
knitr::opts_chunk$set(echo = TRUE)
lm_sales_model <- lm(
total_sales_revenue ~ avg_discount + total_quantity_sold, data = train_data1)
summary(lm_sales_model)
vif(lm_sales_model)
library(car)
vif(lm_sales_model)
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(outliers)
library(reshape2)
library(lubridate)
library(scales)
library(rpart)
library(rpart.plot)
library(caret)
library(magrittr)
library(Metrics)
library(rattle)
library(corrplot)
library(pROC)
library(car)
fitted_values <- lm_sales_model$fitted.values
residuals <- train_data1$total_sales_revenue - fitted_values
MAE <- mean(abs(residuals))
RMSE <- sqrt(mean(residuals^2))
SS_total <- sum((train_data1$total_sales_revenue - mean(train_data1$total_sales_revenue))^2)
SS_residual <- sum(residuals^2)
R_squared <- 1 - (SS_residual / SS_total)
n <- nrow(train_data1)
p <- length(coef(lm_sales_model)) - 1
Adjusted_R_squared <- 1 - ((1 - R_squared) * (n - 1)) / (n - p - 1)
cat("MAE:", MAE, "\n")
cat("RMSE:", RMSE, "\n")
cat("R-squared:", R_squared, "\n")
cat("Adjusted R-squared:", Adjusted_R_squared, "\n")
regression_tree <- rpart(
total_sales_revenue ~ avg_discount + total_quantity_sold,data = train_data1,method="anova")
summary(regression_tree)
fancyRpartPlot(regression_tree)
residuals_tree <- test_data1$total_sales_revenue - predict(regression_tree, test_data1)
MAE_tree <- mean(abs(residuals_tree))
RMSE_tree <- sqrt(mean(residuals_tree^2))
SS_total_tree <- sum((test_data1$total_sales_revenue - mean(test_data1$total_sales_revenue))^2)
SS_residual_tree <- sum(residuals_tree^2)
R_squared_tree <- 1 - (SS_residual_tree / SS_total_tree)
n <- nrow(test_data1)  # number of data points
p <- length(coef(regression_tree))  # number of predictors
Adjusted_R_squared_tree <- 1 - ((1 - R_squared_tree) * (n - 1)) / (n - p - 1)
cat("MAE (Tree):", MAE_tree, "\n")
cat("RMSE (Tree):", RMSE_tree, "\n")
cat("R-squared (Tree):", R_squared_tree, "\n")
cat("Adjusted R-squared (Tree):", Adjusted_R_squared_tree, "\n")
customer_data <- cleaned_data %>%
group_by(CustomerID) %>%
summarize(
purchase_frequency = n_distinct(InvoiceNo),
total_quantity = sum(Quantity, na.rm = TRUE),
total_spend = sum(UnitPrice * Quantity, na.rm = TRUE),
avg_discount = mean(Discount, na.rm = TRUE),
preferred_payment = as.character(names(sort(table(PaymentMethod), decreasing = TRUE)[1])),
preferred_category = as.character(names(sort(table(Category), decreasing = TRUE)[1]))
)
spend_summary <- summary(customer_data$total_spend)
low_threshold <- spend_summary["1st Qu."]
high_threshold <- spend_summary["3rd Qu."]
customer_data <- customer_data %>%
mutate(
customer_segment = case_when(
total_spend < low_threshold ~ "Low",
total_spend >= low_threshold & total_spend < high_threshold ~ "Medium",
total_spend >= high_threshold ~ "High"
)
)
customer_data$preferred_payment <-  as.factor(customer_data$preferred_payment)
customer_data$preferred_category <- as.factor(customer_data$preferred_category)
customer_data$preferred_payment <- as.numeric(customer_data$preferred_payment)
customer_data$preferred_category <- as.numeric(customer_data$preferred_category)
cor_matrix <- cor(customer_data %>%
select(purchase_frequency, total_quantity, avg_discount, preferred_payment, preferred_category),
use = "complete.obs")
corrplot(
cor_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
col = colorRampPalette(c("red", "white", "purple"))(200),
mar = c(0, 0, 1, 0))
set.seed(123)
train_indices <- sample(1:nrow(customer_data), 0.7 * nrow(customer_data))
train_data <- customer_data[train_indices, ]
test_data <- customer_data[-train_indices, ]
classification_tree <- rpart(
customer_segment ~ purchase_frequency + total_quantity + avg_discount + preferred_payment + preferred_category,
data = train_data,
method = "class"
)
summary(classification_tree)
fancyRpartPlot(classification_tree)
predictions <- predict(classification_tree, test_data, type = "class")
test_data$predicted_segment <- predictions
confusion_matrix <- confusionMatrix(
data = as.factor(test_data$predicted_segment),
reference = as.factor(test_data$customer_segment))
print(confusion_matrix)
cat("Accuracy:", confusion_matrix$overall["Accuracy"], "\n")
predicted_probs <- predict(classification_tree, test_data, type = "prob")
actual <- ifelse(test_data$customer_segment == "High", 1, 0)
predicted <- predicted_probs[, "High"]
thresholds <- seq(0, 1, by = 0.01)
tpr <- c()
fpr <- c()
for (threshold in thresholds) {
predicted_class <- ifelse(predicted >= threshold, 1, 0)
tp <- sum(predicted_class == 1 & actual == 1)
fp <- sum(predicted_class == 1 & actual == 0)
fn <- sum(predicted_class == 0 & actual == 1)
tn <- sum(predicted_class == 0 & actual == 0)
tpr <- c(tpr, tp / (tp + fn))
fpr <- c(fpr, fp / (fp + tn))
}
plot(fpr, tpr, type = "l", col = "blue", lwd = 2, xlab = "False Positive Rate", ylab = "True Positive Rate",
main = "ROC Curve")
abline(a = 0, b = 1, col = "red", lty = 2)
sortedindices = order(fpr)
fpr = fpr[sortedindices]
tpr = tpr[sortedindices]
auc = sum((fpr[-1] - fpr[-length(fpr)]) * (tpr[-1] + tpr[-length(tpr)]) / 2)
cat("AUC:",auc, "\n")
logistic_data <- cleaned_data %>%
mutate(
SalesChannel = ifelse(SalesChannel == "Online", 1, 0)
) %>%
select(
SalesChannel, CustomerID, Quantity, UnitPrice, Discount, OrderPriority, PaymentMethod)
set.seed(123)
train_indices <- sample(1:nrow(logistic_data), 0.7 * nrow(logistic_data))
train_data <- logistic_data[train_indices, ]
test_data <- logistic_data[-train_indices, ]
logistic_model <- glm(
SalesChannel ~ Quantity + UnitPrice + Discount + OrderPriority + PaymentMethod,
data = train_data,
family = "binomial"
)
summary(logistic_model)
predicted_probabilities <- predict(logistic_model, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
test_data$predicted_sales_channel <- predicted_class
confusion_matrix2 <- confusionMatrix(
data = as.factor(test_data$predicted_sales_channel),
reference = as.factor(test_data$SalesChannel))
print(confusion_matrix2)
accuracy <- confusion_matrix2$overall["Accuracy"]
cat("Accuracy:", accuracy, "\n")
predicted_probs = predict(logistic_model, test_data, type = "response")
roc_curve= roc(test_data$SalesChannel, predicted_probabilities)
plot(roc_curve, col = "blue", lwd = 2, main = "ROC Curve")
abline(a = 0, b = 1, col = "red", lty = 2)
auc_value = auc(roc_curve)
cat("AUC:", auc_value, "\n")
